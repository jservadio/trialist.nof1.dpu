Sleep.beta = Pain.out[["beta"]]
Thinking.beta = Thinking.out[["beta"]]
Constipation.beta = Constipation.out[["beta"]]
Pain.beta.change = beta.change(Pain.beta, score.range["Pain"])
Fatigue.beta.change = beta.change(Fatigue.beta, score.range["Fatigue"])
Drowsy.beta.change = beta.change(Drowsy.beta, score.range["Drowsy"])
Sleep.beta.change = beta.change(Sleep.beta, score.range["Sleep"])
Thinking.beta.change = beta.change(Thinking.beta, score.range["Thinking"])
Constipation.beta.change = beta.change(Constipation.beta, score.range["Constipation"])
beta.change.interval = round(rbind(Pain.beta.change[[1]], Fatigue.beta.change[[1]], Drowsy.beta.change[[1]], Sleep.beta.change[[1]], Thinking.beta.change[[1]], Constipation.beta.change[[1]]),3)
beta.change.probs = round(rbind(Pain.beta.change[[2]], Fatigue.beta.change[[2]], Drowsy.beta.change[[2]], Sleep.beta.change[[2]], Thinking.beta.change[[2]], Constipation.beta.change[[2]]),3)
dimnames(beta.change.interval) = list(outnames,c("P025", "Median", "P975"))
dimnames(beta.change.probs) = list(outnames, paste("Proportion",c("< 0.2", "-0.2 - 0", "0 - 0.2", "> 0.2")))
return(list(beta.change.interval, beta.change.probs))
}
beta.change <- function(beta, score.range)
{
beta.change = beta/score.range
beta.change.1 = as.vector(c(quantile(beta.change,.025), median(beta.change), quantile(beta.change,.975)))
beta.change.2 = as.numeric(table(cut(beta.change, breaks = c(-1, -0.2, 0, 0.2, 1))))/length(beta.change)
return(list(beta.change.1, beta.change.2))
}
run.norm <-
function (Y, Treat, Covs=NULL, model = "normal", var.model = "hom", nChains = 3,
conv.limit = 1.05, niters = 50000, nruns = 5000, setsize = 4000,
alphaprior, betaprior, varprior,varprior.params, path = "")
{
# Y is vector of outcomes
# Treat is vector of treatment labels
# Covs is matrix of covariates in meta-regression model; if none given, it is NULL
# model is normal
# nChains is number of MCMC chains to run
# conv.limit is limit for BGR convergence
# niters is number of MCMC iterations to run
# nruns is number of MCMC iterations to save
# setsize is number of MCMC iterations after which convergence diagnostics should be checked
# alphaprior is prior for intercept as 3-list (distribution, mean, precision)
# betaprior is prior for treatment effect as 3-list (distribution, mean, precision)
# varprior is 2 element list of parameter and distribution upon which prior for variance is put
#    choices for parameter: precision(prec), variance(var), sd(sd)
#    choices for distribution: gamma(gamma), Wishart(wish), uniform(unif), halfnormal(hn)
#    valid range if truncated distribution (missing if not truncated)
# varprior.params is set of parameters of variance distribution
# path is directory where data are stored
nobs = length(Y)
if(!is.null(Covs)) Covs = as.matrix(Covs)
prior = make.prior(nouts,Covs,alphaprior,betaprior,slopeprior,varprior,varprior.params,nstudy)
inInits = make.inits(Y, Covs, Treat, varprior)
inData <- norm.data(Y, Covs, prior, Treat)
model.norm(nobs, covs, prior, varprior, path)
pars.to.save <- c("alpha","beta")
if (!is.null(Covs))
pars.to.save = c(pars.to.save, "slope")
pars.to.save = c(pars.to.save, "Sd")
jags.out <- jags.fit(inData,inInits,pars.to.save,model,"model.txt",nChains,niters,conv.limit,setsize,nruns,Covs)
burn.in <- jags.out[[1]]
no.runs <- jags.out[[2]]
samples <- jags.out[[3]]
varnames <- dimnames(samples)[[3]]
nvars <- dim(samples)[3]
alpha.vars <- grep("alpha", varnames)
alpha <- as.vector(samples[, , alpha.vars])
beta.vars <- grep("beta", varnames)
beta <-  as.vector(samples[, , beta.vars])
Sd.vars <- grep("Sd", varnames)
Sd <- as.vector(samples[, , Sd.vars])
if (!is.null(Covs)) {
slope.vars <- grep("slope", varnames)
slope <- samples[, , slope.vars]
}
if (is.null(Covs)) {
out <- list(burn.in, no.runs, Y, alpha, beta, Sd)
names(out) <- c("Burn In", "Number runs per chain", "Y", "alpha", "beta", "Sd")
}
else {
out <- list(burn.in, no.runs, Y, alpha, beta, Sd, slope)
names(out) <- c("Burn In", "Number runs per chain", "Y", "alpha", "beta", "Sd", "Slopes")
}
return(out)
}
jags.fit <-
function(inData, inInits, pars.to.save, model, model.file, n.chains, niters, conv.limit, setsize, nruns, covs)
{
mod = jags.model(model.file, data = inData, inits = inInits, n.chains = n.chains, n.adapt = 0)
done.adapt = adapt(mod, n.iter = 2*setsize, end.adaptation = FALSE)
while(!done.adapt)
done.adapt = adapt(mod, n.iter = 2*setsize, end.adaptation = FALSE)
samples <- coda.samples(model = mod, variable.names = pars.to.save, n.iter = setsize, thin = 1)
nsamples = setsize
varnames <- dimnames(samples[[3]])[[2]]
alpha.vars <- grep("alpha", varnames)
beta.vars <- grep("beta", varnames)
Sd.vars <- grep("Sd", varnames)
if (!is.null(covs)) slope.vars <- grep("slope", varnames)
Mean.vars <- grep("theta", varnames)
if (is.null(covs)) {
temp.samples.array = array(NA,c(niters,n.chains,length(alpha.vars)+length(beta.vars)+length(Sd.vars)))
temp.samples.array[seq(nsamples),1,] <- samples[[1]][,c(alpha.vars,beta.vars,Sd.vars)]
temp.samples.array[seq(nsamples),2,] <- samples[[2]][,c(alpha.vars,beta.vars,Sd.vars)]
temp.samples.array[seq(nsamples),3,] <- samples[[3]][,c(alpha.vars,beta.vars,Sd.vars)]
dimnames(temp.samples.array) <- list(NULL, NULL, varnames[c(alpha.vars,beta.vars,Sd.vars)])
}
else {
temp.samples.array = array(NA,c(niters,n.chains,length(alpha.vars)+length(beta.vars)+length(Sd.vars)+length(slope.vars)))
temp.samples.array[seq(nsamples),1,] <- samples[[1]][,c(alpha.vars,slope.vars,beta.vars,Sd.vars)]
temp.samples.array[seq(nsamples),2,] <- samples[[2]][,c(alpha.vars,slope.vars,beta.vars,Sd.vars)]
temp.samples.array[seq(nsamples),3,] <- samples[[3]][,c(alpha.vars,slope.vars,beta.vars,Sd.vars)]
dimnames(temp.samples.array) <- list(NULL, NULL, varnames[c(d.vars,slope.vars,beta.vars,Sd.vars)])
}
max.bgrRatio = max(apply(temp.samples.array[seq(nsamples),,],3,maxbgrRatio))
check <- max.bgrRatio > conv.limit
print(max.bgrRatio)
flush.console()
if (check) {
count <- 1
while (check & (count < niters/setsize)) {
samples <- coda.samples(mod, variable.names = pars.to.save, n.iter = setsize, thin = 1)
count <- count + 1
if (is.null(covs)) {
temp.samples.array[nsamples + seq(setsize),1,] = samples[[1]][,c(alpha.vars,beta.vars,Sd.vars)]
temp.samples.array[nsamples + seq(setsize),2,] = samples[[2]][,c(alpha.vars,beta.vars,Sd.vars)]
temp.samples.array[nsamples + seq(setsize),3,] = samples[[3]][,c(alpha.vars,beta.vars,Sd.vars)]
}
else {
temp.samples.array[nsamples + seq(setsize),1,] = samples[[1]][,c(alpha.vars,slope.vars,beta.vars,Sd.vars)]
temp.samples.array[nsamples + seq(setsize),2,] = samples[[2]][,c(alpha.vars,slope.vars,beta.vars,Sd.vars)]
temp.samples.array[nsamples + seq(setsize),3,] = samples[[3]][,c(alpha.vars,slope.vars,beta.vars,Sd.vars)]
}
nsamples = nsamples + setsize
max.bgrRatio = max(apply(temp.samples.array[seq(nsamples),,],3,maxbgrRatio))
check <- max.bgrRatio > conv.limit
print(max.bgrRatio)
flush.console()
}
}
no.to.converge = nsamples
print(max.bgrRatio)
flush.console()
no.to.keep <- no.to.converge/2.0      # 2nd half of converged sequence is good
if (nruns > no.to.keep)
samples = coda.samples(mod, variable.names = pars.to.save, n.iter = nruns, thin = 1)
else {
thin <- floor(no.to.keep/nruns)
samples <- coda.samples(mod, variable.names = pars.to.save, n.iter=no.to.keep, n.thin = thin)
}
samples.array = array(NA, c(dim(samples[[1]])[1],n.chains,length(varnames)))
samples.array[,1,] = samples[[1]]
samples.array[,2,] = samples[[2]]
samples.array[,3,] = samples[[3]]
dimnames(samples.array)[[3]] = varnames
out<-list(no.to.converge, dim(samples.array)[1],samples.array)
names(out) <- c("BurnIn","No. Runs Per Chain", "Samples")
return(out)
}
make.prior<-
function (nout,covs,alphaprior, betaprior, slopeprior, varprior,varprior.params, nstudy)
{
mean.alpha = alphaprior[[2]]
prec.alpha = alphaprior[[3]]
mean.beta = betaprior[[2]]
prec.beta = betaprior[[3]]
Prior.alpha <- paste("d",alphaprior[[1]],"(mean.alpha,prec.alpha)",sep="")
Prior.beta <- paste("d",betaprior[[1]],"(mean.beta,prec.beta)",sep="")
if (!is.null(covs)) {
mean.slope = slopeprior[[2]]
prec.slope = slopeprior[[3]]
Prior.slope = paste("d",slopeprior[[1]],"(mean.slope,prec.slope)",sep="")
}
prec.1 = varprior.params[1]
prec.2 = varprior.params[2]
if (varprior[[1]] == "prec") {
if (varprior[[2]] == "gamma")
Prior.prec = paste("dgamma(prec.1, prec.2)",sep="")
else return("Only Gamma currently supported for precision distribution")
}
else if (varprior[[1]] == "sd") {
if (varprior[[2]] == "unif")
Prior.prec = paste("dunif(prec.1, prec.2)",sep="")
else if (varprior[[2]] == "hn")
Prior.prec = paste("dnorm(0,1)I(",varprior[[3]][1],",",varprior[[3]][2],")",sep="")
else return("Unsupported sd distribution")
}
else if (varprior[[1]] == "var") {
if (varprior[[2]] == "unif")
Prior.prec = paste("dunif(prec.1,prec.2)",sep="")
else if (varprior[[2]] == "hn")
Prior.prec = paste("dnorm(0,1),I(",varprior[[3]][1],",",varprior[[3]][2],")",sep="")
else return("Unsupported var distribution")
}
out <- list(mean.alpha=mean.alpha, prec.alpha=prec.alpha, mean.beta=mean.beta,
prec.beta=prec.beta,Prior.alpha=Prior.alpha, Prior.beta=Prior.beta, prec.1=prec.1, prec.2=prec.2, Prior.prec=Prior.prec)
if (!is.null(covs)) {
out[[1+length(out)]] = mean.slope
names(out)[[length(out)]] = "mean.slope"
out[[1+length(out)]] = prec.slope
names(out)[[length(out)]] = "prec.slope"
out[[1+length(out)]] = Prior.slope
names(out)[[length(out)]] = "Prior.slope"
}
return(out)
}
make.inits <- function(Y, x, Treat, varprior)
{
#     nout                number of outcomes
#     inits               list of items needed for regression (see below)
#     x                   matrix of predictors
#     Treat               vector of treatment labels
#     varprior is 2 element list of parameter and distribution upon which prior for variance is put
#        choices for parameter: precision(prec), variance(var), sd(sd)
#        choices for distribution: gamma(gamma), Wishart(wish), uniform(unif), halfnormal(hn)
#        valid range if truncated distribution (missing if not truncated)
if (is.null(x)) {
fit <- summary(lm(Y ~ Treat))
}
else {
fit <- summary(lm(Y ~ Treat + x))
slope[unique.Treat[-1],,k] <- coef(fit)[ntreat-1 + seq((ntreat-1)*dim(x)[2]),1]
if (!is.nan(fit$fstat[1]))
se.slope[unique.Treat[-1],,k] <- coef(fit)[ntreat-1 + seq((ntreat-1)*dim(x)[2]),2]
else
se.slope[unique.Treat[-1],,k] <- 1
}
alpha = coef(fit)[1,1]
beta = coef(fit)[2,1]
if (!is.nan(fit$fstat[1])) {
se.alpha = coef(fit)[1,2]
se.beta = coef(fit)[2,2]
tau <- fit$sigma^2
}
else {
se.alpha = se.beta = tau = 1
}
inits.1 = list(alpha = alpha + se.alpha*rnorm(1))
names(inits.1) = "alpha"
inits.2 = list(alpha = alpha + se.alpha*rnorm(1))
names(inits.2) = "alpha"
inits.3 = list(alpha = alpha + se.alpha*rnorm(1))
names(inits.3) = "alpha"
inits.1[[1+length(inits.1)]] = beta + se.beta*rnorm(1)
names(inits.1)[[length(inits.1)]] = "beta"
inits.2[[1+length(inits.2)]] = beta + se.beta*rnorm(1)
names(inits.2)[[length(inits.2)]] = "beta"
inits.3[[1+length(inits.3)]] = beta + se.beta*rnorm(1)
names(inits.3)[[length(inits.3)]] = "beta"
if (!is.null(x)) {
inits.1[[1+length(inits.1)]] = slope + se.slope*norm(1)
names(inits.1)[[length(inits.1)]] = "slope"
inits.2[[1+length(inits.2)]] = slope + se.slope*norm(1)
names(inits.2)[[length(inits.2)]] = "slope"
inits.3[[1+length(inits.3)]] = slope + se.slope*norm(1)
names(inits.3)[[length(inits.3)]] = "slope"
}
random.ISigma1 = rchisq(1,fit$df[2])
random.ISigma2 = rchisq(1,fit$df[2])
random.ISigma3 = rchisq(1,fit$df[2])
prec.1 = random.ISigma1/(tau * fit$df[2])
prec.2 = random.ISigma2/(tau * fit$df[2])
prec.3 = random.ISigma3/(tau * fit$df[2])
if (varprior[[1]] == "prec") {
inits.1[[1+length(inits.1)]] = prec.1
names(inits.1)[[length(inits.1)]] = "prec"
inits.2[[1+length(inits.2)]] = prec.2
names(inits.2)[[length(inits.2)]] = "prec"
inits.3[[1+length(inits.3)]] = prec.3
names(inits.3)[[length(inits.3)]] = "prec"
}
else if (varprior[[1]] == "sd") {
inits.1[[1+length(inits.1)]] = 1/sqrt(prec.1)
names(inits.1)[[length(inits.1)]] = "Sd"
inits.2[[1+length(inits.2)]] = 1/sqrt(prec.2)
names(inits.2)[[length(inits.2)]] = "Sd"
inits.3[[1+length(inits.3)]] = 1/sqrt(prec.3)
names(inits.3)[[length(inits.3)]] = "Sd"
}
else if (varprior[[1]] == "var") {
inits.1[[1+length(inits.1)]] = 1/prec.1
names(inits.1)[[length(inits.1)]] = "Var"
inits.2[[1+length(inits.2)]] = 1/prec.2
names(inits.2)[[length(inits.2)]] = "Var"
inits.3[[1+length(inits.3)]] = 1/prec.3
names(inits.3)[[length(inits.3)]] = "Var"
}
inInits <- list(inits.1,inits.2,inits.3)
return(inInits)
}
norm.data <-
function (Y, Covs, prior, Treat)
{
inData = list(Treat = Treat, Y = Y, mean.alpha = prior$mean.alpha, prec.alpha = prior$prec.alpha,
mean.beta = prior$mean.beta, prec.beta = prior$prec.beta,prec.1 = prior$prec.1, prec.2 = prior$prec.2)
if (!is.null(Covs)) {
inData[[1+length(inData)]]  = Covs
names(inData)[[length(inData)]] = "x"
inData[[1+length(inData)]]  = prior$mean.slope
names(inData)[[length(inData)]] = "mean.slope"
inData[[1+length(inData)]]  = prior$prec.slope
names(inData)[[length(inData)]] = "prec.slope"
}
return(inData)
}
model.norm =
function(nobs, covs, prior, varprior, path)
{
cat("model\n{",file=paste(path,"model.txt",sep=""))
model.obs(nobs,covs, prior,path)
var.hom(prior,varprior,path)
cat("
}",file=paste(path,"model.txt",sep=""),append=T,sep="")
}
model.obs <-
function(nobs,covs, prior,path)
{
cat("
for (i in 1:", nobs,") {", file = paste(path,"model.txt",sep=""), append = T,sep="")
cat("
Y[i] ~ dnorm(mu[i],prec)
mu[i] <- alpha + beta*Treat[i]
}",  file = paste(path,"model.txt",sep=""), append = T,sep="")
cat("
alpha ~ ", prior$Prior.alpha,"\n",
"   beta ~ ", prior$Prior.beta, file = paste(path,"model.txt",sep=""), append = T,sep="")
}
var.hom <- function(prior,varprior,path)
{
if (varprior[[1]]=="prec") {
cat("
prec ~ ",prior$Prior.prec,"
sigma <- 1/prec",file=paste(path,"model.txt",sep=""),append=T,sep="")
}
else if (varprior[[1]] == "sd") {
cat("
Sd ~ ",prior$Prior.prec,"
prec <- 1/pow(Sd,2)
Sigma <- 1/prec",file=paste(path,"model.txt",sep=""),append=T,sep="")
}
}
maxbgrRatio <- function(x)
{
t1 = mcmc(x[,1,drop=F])
t2 = mcmc(x[,2,drop=F])
t3 = mcmc(x[,3,drop=F])
cols.to.drop = seq(dim(t1)[2])[apply(t1,2,var)==0]
if (length(cols.to.drop > 0)) {
t1 = t1[,-cols.to.drop,drop=F]
t2 = t2[,-cols.to.drop,drop=F]
t3 = t3[,-cols.to.drop,drop=F]
}
max.bgrRatio = max(gelman.diag(list(t1,t2,t3),autoburnin=F)[[1]][,1])
return(max.bgrRatio)
}
library(dpu.jags)
install.packages("rjags")
install.packages("rjags")
library(dpu.jags)
library(dpu.jags)
ls()
paste(ls(), ".R")
paste0(ls(), ".R")
getwd()
setwd("R")
getwd()
paste0(ls(), ".R")
?package.skeleton
file.create(paste0(ls(), ".R"))
beta.change
dpu.jags
jags.fit
ls
deparse(jags.fit)
writeLines(deparse(jags.fit), "jags.fit.R")
?deparse
writeLines(deparse(jags.fit, 100), "jags.fit.R")
writeLines(deparse(jags.fit, 120), "jags.fit.R")
writeLines(deparse(beta.change, 120), "beta.change.R")
ls()
lapply(as.list(ls()), function(x){writeLines(deparse(get(x), 120), paste0(x, ".R"))})
library(dpu.jags)
rm(list=ls())
library(Nof1)
nof1=run.norm(Y=c(22, 18, 21,16, 22, 15, 23, 14), Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
mcmc
library(jags)
library(rjags)
mcmc
library(Nof1)
nof1=run.norm(Y=c(22, 18, 21,16, 22, 15, 23, 14), Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
nof1
library(Nof1)
ls()
nof1=run.norm(Y=c(22, 18, 21,16, 22, 15, 23, 14), Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
search()
search()
library(Nof1)
search()
nof1=run.norm(Y=c(22, 18, 21,16, 22, 15, 23, 14), Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
library(Nof1)
nof1=run.norm(Y=c(22, 18, 21,16, 22, 15, 23, 14), Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
library(Nof1)
nof1=run.norm(Y=c(22, 18, 21,16, 22, 15, 23, 14), Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
library(Nof1)
nof1=run.norm(Y=c(22, 18, 21,16, 22, 15, 23, 14), Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
library(Nof1)
nof1=run.norm(Y=c(22, 18, 21,16, 22, 15, 23, 14), Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
nof1=run.norm(Y=c(22, 18, 21,16, 22, 15, 23, 14), Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
coda.samples
rjags:::coda.samples
library(Nof1)
library(Nof1)
search()
library(Nof1)
search()
nof1=run.norm(Y=c(22, 18, 21,16, 22, 15, 23, 14), Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
nof1
library(Nof1)
jags.fit
?jags.fit
library(rjags)
ls("package:rjags")
library(devtools)
?install
install("~/workspace/Mobilize/")
install("~/workspace/Mobilize/")
search()
library(Mobilize)
search()
install("~/workspace/Mobilize/")
library(Nof)
library(Nof)
wrap.norm <-
function(Pain, Fatigue, Drowsy, Sleep, Thinking, Constipation, Treat, score.range = c(30, 10, 10, 10, 10, 10),
Covs=NULL, model = "normal", var.model = "hom", nChains = 3,
conv.limit = 1.05, niters = 50000, nruns = 5000, setsize = 4000,
alphaprior, betaprior, varprior,varprior.params, path = "")
{
# Pain, Fatigue, Drowsy, Sleep, Thinking, Constipation are vectors of outcomes
# Treat is vector of treatment labels
# score.range is vector of upper limits of scores (with 0 as lower limit)
# Covs is matrix of covariates in meta-regression model; if none given, it is NULL
# model is normal (for now)
# var.model is homogeneous by default for now
# nChains is number of MCMC chains to run
# conv.limit is limit for BGR convergence
# niters is number of MCMC iterations to run
# nruns is number of MCMC iterations to save
# setsize is number of MCMC iterations after which convergence diagnostics should be checked
# alphaprior is prior for intercept as 3 element list (distribution, mean, precision)
# betaprior is prior for treatment effect as 3 element list (distribution, mean, precision)
# varprior is 2 element list of parameter and distribution upon which prior for variance is put
#    choices for parameter: precision(prec), variance(var), sd(sd)
#    choices for distribution: gamma(gamma), Wishart(wish), uniform(unif), halfnormal(hn)
# varprior.params is vector of parameters of variance distribution
# path is directory where data are stored
nobs = length(Pain)
stopifnot(length(Pain)==nobs, length(Fatigue)==nobs, length(Drowsy)==nobs, length(Sleep)==nobs, length(Thinking)==nobs, length(Constipation)==nobs,length(Treat)==nobs, "Outcome vectors of different lengths")
stopifnot(length(varprior)==2)
stopifnot(length(alphaprior)==3, length(betaprior)==3, "Priors for alpha and beta incorrect")
stopifnot(length(varprior.params)==2, "Wrong number of parameters for variance prior")
varprior = as.list(varprior)
alphaprior = as.list(alphaprior)
betaprior = as.list(betaprior)
outnames = c("Pain", "Fatigue", "Drowsy", "Sleep", "Thinking", "Constipation")
names(score.range) = outnames
Pain.out = run.norm(Pain, Treat, Covs, model, var.model, nChains, conv.limit, niters, nruns, setsize, alphaprior, betaprior, varprior,varprior.params, path = "")
Fatigue.out = run.norm(Fatigue, Treat, Covs, model, var.model, nChains, conv.limit, niters, nruns, setsize, alphaprior, betaprior, varprior,varprior.params, path = "")
Drowsy.out = run.norm(Drowsy, Treat, Covs, model, var.model, nChains, conv.limit, niters, nruns, setsize, alphaprior, betaprior, varprior,varprior.params, path = "")
Sleep.out = run.norm(Sleep, Treat, Covs, model, var.model, nChains, conv.limit, niters, nruns, setsize, alphaprior, betaprior, varprior,varprior.params, path = "")
Thinking.out = run.norm(Thinking, Treat, Covs, model, var.model, nChains, conv.limit, niters, nruns, setsize, alphaprior, betaprior, varprior,varprior.params, path = "")
Constipation.out = run.norm(Constipation, Treat, Covs, model, var.model, nChains, conv.limit, niters, nruns, setsize, alphaprior, betaprior, varprior,varprior.params, path = "")
Pain.beta = Pain.out[["beta"]]
Fatigue.beta = Fatigue.out[["beta"]]
Drowsy.beta = Drowsy.out[["beta"]]
Sleep.beta = Pain.out[["beta"]]
Thinking.beta = Thinking.out[["beta"]]
Constipation.beta = Constipation.out[["beta"]]
Pain.beta.change = beta.change(Pain.beta, score.range["Pain"])
Fatigue.beta.change = beta.change(Fatigue.beta, score.range["Fatigue"])
Drowsy.beta.change = beta.change(Drowsy.beta, score.range["Drowsy"])
Sleep.beta.change = beta.change(Sleep.beta, score.range["Sleep"])
Thinking.beta.change = beta.change(Thinking.beta, score.range["Thinking"])
Constipation.beta.change = beta.change(Constipation.beta, score.range["Constipation"])
beta.change.interval = round(rbind(Pain.beta.change[[1]], Fatigue.beta.change[[1]], Drowsy.beta.change[[1]], Sleep.beta.change[[1]], Thinking.beta.change[[1]], Constipation.beta.change[[1]]),3)
beta.change.probs = round(rbind(Pain.beta.change[[2]], Fatigue.beta.change[[2]], Drowsy.beta.change[[2]], Sleep.beta.change[[2]], Thinking.beta.change[[2]], Constipation.beta.change[[2]]),3)
dimnames(beta.change.interval) = list(outnames,c("P025", "Median", "P975"))
dimnames(beta.change.probs) = list(outnames, paste("Proportion",c("< 0.2", "-0.2 - 0", "0 - 0.2", "> 0.2")))
return(list(beta.change.interval, beta.change.probs))
}
library(Nof)
library(Nof)
library(Nof)
rm(list=ls())
ls()
wrap.norm
nof1=wrap.norm(Pain=c(22, 18, 21,16, 22, 15, 23, 14), Fatigue=c(7,4,9,3,7,4,8,3), Drowsy=c(5,5,5,4,5,5,4,5), Sleep=c(4,1,4,1,4,1,4,1), Thinking=c(5,2,6,1,8,4,7,6), Constipation=c(10,7,10,6,9,5,10,3),Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
library(Nof)
library(Nof)
nof1=wrap.norm(Pain=c(22, 18, 21,16, 22, 15, 23, 14), Fatigue=c(7,4,9,3,7,4,8,3), Drowsy=c(5,5,5,4,5,5,4,5), Sleep=c(4,1,4,1,4,1,4,1), Thinking=c(5,2,6,1,8,4,7,6), Constipation=c(10,7,10,6,9,5,10,3),Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
?stopifnot
stopifnot(F, "FOO")
stopifnot(T, "FOO")
stopifnot(TRUE, "FOO")
?stopifnot
1==1==1
1==1==1==1
1 == 1
1 == 1 == T
1 == 1 == TRUE
TRUE == 1 == 1
?stopifnot
library(Nof)
nof1=wrap.norm(Pain=c(22, 18, 21,16, 22, 15, 23, 14), Fatigue=c(7,4,9,3,7,4,8,3), Drowsy=c(5,5,5,4,5,5,4,5), Sleep=c(4,1,4,1,4,1,4,1), Thinking=c(5,2,6,1,8,4,7,6), Constipation=c(10,7,10,6,9,5,10,3),Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
nof1=wrap.norm(Pain=c(22, 18, 21,16, 22, 15, 23, 14), Fatigue=c(7,4,9,3,7,4,8,3), Drowsy=c(5,5,5,4,5,5,4,5), Sleep=c(4,1,4,1,4,1,4,1), Thinking=c(5,2,6,1,8,4,7,6), Constipation=c(10,7,10,6,9,5,10,3),Treat=c(0,1,0,1,0,1,0,1), conv.limit=1.05, niters=10000, setsize=1000, alphaprior = list("norm",0,1e-6),betaprior = list("norm",0,1e-6),varprior=list("sd","unif"),varprior.params=c(0,5),path="")
nof1
